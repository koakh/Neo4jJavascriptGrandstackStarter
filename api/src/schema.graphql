type User {
  id: ID!
  name: String
  friends: [User] @relation(name: "FRIENDS", direction: "BOTH")
  reviews: [Review] @relation(name: "WROTE", direction: "OUT")
  avgStars: Float
    @cypher(
      statement: "MATCH (this)-[:WROTE]->(r:Review) RETURN toFloat(avg(r.stars))"
    )
  numReviews: Int
    @cypher(statement: "MATCH (this)-[:WROTE]->(r:Review) RETURN COUNT(r)")
}

type Business {
  id: ID!
  name: String
  address: String
  city: String
  state: String
  reviews: [Review] @relation(name: "REVIEWS", direction: "IN")
  categories: [Category] @relation(name: "IN_CATEGORY", direction: "OUT")
}

type Review {
  id: ID!
  stars: Int
  text: String
  date: Date
  business: Business @relation(name: "REVIEWS", direction: "OUT")
  user: User @relation(name: "WROTE", direction: "IN")
}

type Category {
  name: ID!
  businesses: [Business] @relation(name: "IN_CATEGORY", direction: "IN")
}

type Query {
  usersBySubstring(substring: String): [User]
    @cypher(
      statement: "MATCH (u:User) WHERE u.name CONTAINS $substring RETURN u"
    )
  businessBySubstring(substring: String): [Business]
    @cypher(
      statement: "MATCH (b:Business) WHERE b.name CONTAINS $substring RETURN b"
    )
  categoryBySubstring(substring: String): [Category]
    @cypher(
      statement: "MATCH (c:Category) WHERE c.name CONTAINS $substring RETURN c"
    )
}

type _AddUserFriendsPayload {
  from: User
  to: User
}

type Mutation {
  AddUserFriends(from: _UserInput!, to: _UserInput!): _AddUserFriendsPayload @cypher(
  statement:"""
    MATCH (`user_from`:`User` {id: $from.id})
    MATCH (`user_to`:`User` {id: $to.id})
    MERGE (`user_from`)-[`friends_relation`:`FRIENDS`]->(`user_to`)
    RETURN `friends_relation` { from: `user_from` { .name } ,to: `user_to` { .name }  } AS `_AddUserFriendsPayload`;
  """)     
}

# 1. test query log in neo4j
# MATCH (`user_from`:`User` {id: $from.id})
# MATCH (`user_to`:`User` {id: $to.id})
# CREATE (`user_from`)-[`friends_relation`:`FRIENDS`]->(`user_to`)
# RETURN `friends_relation` { from: `user_from` { .name } ,to: `user_to` { .name }  } AS `_AddUserFriendsPayload`;
# 
# with :params {"from": { id: "u3" },"to": { id: "u4" }}
#
# returns in neo4j
# {
#   "from": {
#     "name": "Jenny"
#   },
#   "to": {
#     "name": "Angie"
#   }
# }

# 2 test
# MATCH (`user_from`:`User` {id: $from})-[friends_relation:FRIENDS]-(`user_to`: User)
# RETURN `user_from`, `user_to`